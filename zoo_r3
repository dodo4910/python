import os
import pyautogui
import threading
import time, itertools
import math
from PIL import Image
##from tkinter import Tk, Frame , Button
import sys
sys.path.append(r'C:\Users\DoDo\Desktop\py\zoo')
import zoo_crop_thread
from importlib import reload

A = [[0]*8 for i in range(8)]
B = [[0]*8 for i in range(8)]
#==================截圖程式==================
start_x = pyautogui.locateOnScreen(r'C:\Users\DoDo\Desktop\py\zoo\start.png')[0]
start_y = pyautogui.locateOnScreen(r'C:\Users\DoDo\Desktop\py\zoo\start.png')[1]

def Recog(address):
    a = Image.open(address)
    temp = 0
    for k in range(1,8):
        b = Image.open("C:\\Users\\DoDo\\Desktop\\py\\zoo\\sample\\" + chr(64+k) + ".png")
        #ABCDEFG動物
        total = 0
        
        for x in range(20):
            for y in range(30):
                if a.getpixel((x,y)) == b.getpixel((x,y)):
                    total = total + 1
               
        if total > temp :
            result = k
            temp = total
        else:
            continue
    return result

def zoo_choose(start_x , start_y , A_x , A_y , x , y):
    loc_x = start_x-1 + 22.5 + 55 * (A_x)
    loc_y = start_y+121 + 22.5 + 55 * (A_y)
    rel_x = loc_x + (x*55)
    rel_y = loc_y + (y*55)
    pyautogui.click(loc_x,loc_y)
    pyautogui.click(rel_x,rel_y)

def reco(i,j,method_num):
    if method_num == 1:
        A = {'A','B','C','D','E','F'}
        if i == 0:
            A -= {'A','F'}
        elif i == 7:
            A -= {'C','D'}

        if j == 0:
            A -= {'A','B','C'}
        elif j == 1:
            A -= {'B'}
        elif j == 5:
            A -= {'F','E','D'}
        elif j == 6:
            A -= {'E'}
        return list(set(A))
        
    elif method_num == 2:
        A = {'I','J','K','L','M','N'}
        if i == 0:
            A -= {'I','J','K'}
        elif i == 1:
            A -= {'J'}
        elif i == 5:
            A -= {'M'}
        elif i == 6:
            A -= {'N','M','L'}

        if j == 0:
            A -= {'I','N'}
        elif j == 7:
            A -= {'K','L'}
        return list(set(A))
        
    elif method_num == 3:
        A={'G','H'}
        if i == 0:
            A -= {'G'}
        elif i == 7:
            A -= {'H'}
        return list(set(A))

    elif method_num == 4:
        A={'O','P'}
        if j == 0:
            A -= {'O'}
        elif j == 7:
            A -= {'P'}
        return list(set(A))
    
def A_method():
    for i in range(0,8):
        for j in range(0,7):
            if A[i][j] == A[i][j+1]: 
                print("A method:",A[i][j] , j , i )
                try:
                    for B in reco(i,j,1):
                        if B =='A' and A[i][j] == A[i-1][j-1] :
                            zoo_choose(start_x , start_y , j-1 , i , 0 , -1)
                            print("A")
                            break
                        elif B == 'B' and A[i][j] == A[i][j-2]:
                            zoo_choose(start_x , start_y , j-1 , i , -1 , 0)
                            print("B")
                            break
                        elif B == 'C' and A[i][j] == A[i+1][j-1]:
                            zoo_choose(start_x , start_y , j-1 , i , 0 , 1)
                            print("C")
                            break
                        elif B == 'D' and A[i][j] == A[i+1][j+2]: 
                            zoo_choose(start_x , start_y , j+2 , i , 0 , 1)
                            print("D")
                            break
                        elif B == 'E' and A[i][j] == A[i][j+2]:
                            zoo_choose(start_x , start_y , j+2 , i , 1 , 0)
                            print("E")
                            break
                        elif B == 'F' and A[i][j] == A[i-1][j+2]:
                            zoo_choose(start_x , start_y , j+2 , i , 0 ,-1)
                            print("F")
                            break    
                except:
                    continue
    time.sleep(0.5)
   
def B_method():
    for i in range(0,7):
        for j in range(0,8):
            if A[i][j] == A[i+1][j]: 
                print("B method:",A[i][j] , j , i )
                try:
                    for B in reco(i,j,2):   
                        if B == 'I' and A[i][j] == A[i-1][j-1]:
                            zoo_choose(start_x , start_y , j , i-1 , -1, 0)
                            print("I")
                            break
                        elif B == 'J' and A[i][j] == A[i-2][j]:
                            zoo_choose(start_x , start_y , j , i-1 , 0 ,-1)
                            print("J")
                            break
                        elif B == 'K' and A[i][j] == A[i-1][j+1]:
                            zoo_choose(start_x , start_y , j , i-1 , 1 , 0)
                            print("K")
                            break
                        elif B == 'L' and A[i][j] == A[i+2][j+1]:
                            zoo_choose(start_x , start_y , j , i+2 , 1 , 0)
                            print("L")
                            break
                        elif B == 'M' and A[i][j] == A[i+3][j]:
                            zoo_choose(start_x , start_y , j , i+2 , 0 , 1)
                            print("M")
                            break
                        elif B == 'N' and A[i][j] == A[i+2][j-1]:
                            zoo_choose(start_x , start_y , j , i+2 , -1, 0)
                            print("N")
                            break
                except:
                    continue
    time.sleep(0.5)

def C_method():                    
    for i in range(0,8):
        for j in range(0,6):
            if A[i][j] == A[i][j+2] :
                print("C method:",A[i][j] ,i,j)
                try:
                    for B in reco(i,j,3):
                        if B == 'G' and A[i][j] == A[i-1][j+1]:
                            zoo_choose(start_x , start_y , j+1 , i , 0 , -1)
                            print("G")
                            break
                        elif B == 'H' and A[i][j] == A[i+1][j+1]:
                            zoo_choose(start_x , start_y , j+1 , i , 0 , 1)
                            print("H")
                            break  
                except:
                     continue
    time.sleep(0.5)
    
def D_method():                           
    for i in range(0,6):
        for j in range(0,8):
            if A[i][j] == A[i+2][j] :
                print("D method:",A[i][j] ,i,j)
                try:
                    for B in reco(i,j,4):
                        if B == 'O' and A[i][j] == A[i+1][j-1]:
                            zoo_choose(start_x , start_y , j , i+1 ,-1 , 0)
                            print("O")
                            break
                        elif B == 'P' and A[i][j] == A[i+1][j+1]:
                            zoo_choose(start_x , start_y , j , i+1 , 1 , 0)
                            print("P")
                            break 
                except:
                     continue
    time.sleep(0.5)

def Run_zoo(Method):
    reload(zoo_crop_thread)
    for i in range(0,8):
        for j in range(0,8):
            A[i][j] = Recog('C:\\Users\\DoDo\\Desktop\\py\\zoo\\zoo_temp\\'+str(i)+str(j)+".png")

    print(A)
    eval( Method + '_method()')
        
def crop_1():
    img = pyautogui.screenshot()
    region = (start_x-1,start_y+121,start_x+220,start_y+121+222)
    cropImg = img.crop(region)
    cut = cropImg
    a = 0
    b = 0
    for i in range(0,4):
        for j in range(0,4):
            a = 1*((j+1)//3)
            b = 1*((i+1)//3)
            
            cr = ( 55*j +1 + a,
                   55*i + b,
                   55*(j+1) +1 + a -10,
                   55*(i+1) + b -20)

            temp = cut.crop(cr)

##            for x in range(temp.width):
##                for y in range(temp.height):
##                    if temp.getpixel((x,y)) > (200,200,200):
##                        temp.putpixel((x,y),(255,255,255))

            temp.save('C:\\Users\\DoDo\\Desktop\\py\\zoo\\zoo_temp\\'+str(i)+str(j)+".png")
##            print('crop_1')

def crop_2():
    img = pyautogui.screenshot()
    region = (start_x+221,start_y+121,start_x+443,start_y+121+222)
    cropImg = img.crop(region)
    cut = cropImg
    a = 0
    b = 0
    for i in range(0,4):
        for j in range(4,8):
            a = 1*((j+1)//3)
            b = 1*((i+1)//3)
            
            cr = ( 55*(j-4)+1 + a,
                   55*i + b,
                   55*(j-3) +1 + a -10,
                   55*(i+1) + b -20)

            temp = cut.crop(cr)

##            for x in range(temp.width):
##                for y in range(temp.height):
##                    if temp.getpixel((x,y)) > (200,200,200):
##                        temp.putpixel((x,y),(255,255,255))

            temp.save('C:\\Users\\DoDo\\Desktop\\py\\zoo\\zoo_temp\\'+str(i)+str(j)+".png")
##            print('crop_2')

def crop_3():
    img = pyautogui.screenshot()
    region = (start_x-1,start_y+121+222,start_x+220,start_y+121+444)
    cropImg = img.crop(region)
    cut = cropImg
    a = 0
    b = 0
    for i in range(4,8):
        for j in range(0,4):
            a = 1*((j+1)//3)
            b = 1*((i+1)//3)
            
            cr = ( 55*j+1 + a,
                   55*(i-4) + b,
                   55*(j+1) +1 + a -10,
                   55*((i-4)+1) + b -20)

            temp = cut.crop(cr)

##            for x in range(temp.width):
##                for y in range(temp.height):
##                    if temp.getpixel((x,y)) > (200,200,200):
##                        temp.putpixel((x,y),(255,255,255))

            temp.save('C:\\Users\\DoDo\\Desktop\\py\\zoo\\zoo_temp\\'+str(i)+str(j)+".png")
##            print('crop_3')

def crop_4():
    img = pyautogui.screenshot()
    region = (start_x+221,start_y+121+222,start_x+443,start_y+121+444)
    cropImg = img.crop(region)
    cut = cropImg
    a = 0
    b = 0
    for i in range(4,8):
        for j in range(4,8):
            a = 1*((j+1)//3)
            b = 1*((i+1)//3)
            
            cr = ( 55*(j-4)+1 + a,
                   55*(i-4) + b,
                   55*(j-3) +1 + a -10,
                   55*(i-3) + b -20)

            temp = cut.crop(cr)

##            for x in range(temp.width):
##                for y in range(temp.height):
##                    if temp.getpixel((x,y)) > (200,200,200):
##                        temp.putpixel((x,y),(255,255,255))

            temp.save('C:\\Users\\DoDo\\Desktop\\py\\zoo\\zoo_temp\\'+str(i)+str(j)+".png")
##            print('crop_4')

def main():
    Job_1 = threading.Thread(target = crop_1,name = 'T1')
    Job_2 = threading.Thread(target = crop_2,name = 'T2')
    Job_3 = threading.Thread(target = crop_3,name = 'T3')
    Job_4 = threading.Thread(target = crop_4,name = 'T4')
    Job_1.start()
    Job_2.start()
    Job_3.start()
    Job_4.start()
    Job_1.join()
    Job_2.join()
    Job_3.join()
    Job_4.join()



## 主程式
bug_find = 0

while(bug_find != 1000):
    try:
        main()
        Run_zoo('A')
        main()
        Run_zoo('B')
        main()
        Run_zoo('C')
        main()
        Run_zoo('D')

        bug_find += 1
    except:
        time.sleep(0.5)

tStop = time.time()

print(tStop - tStart)



